/*
 *  test_lossy_synapse.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/* BeginDocumentation
    Name: testsuite::test_lossy_synapse - test of lossy_synapse connection

    Synopsis: (test_lossy_synapse) run -> measure average number of spikes transmitted by a lossy synapse

    Description:
    1000 spikes generated by spike_generator are sent to parrot neurons using a lossy_synapse with transmission probability 50%. 
    If the average number of spikes detected by spike detectors equals to 500 (with marginal error 5%), the synapse works fine.
    Also tests the interval of possible probabilities, [0, 1].

    FirstVersion: June 2017
    Author: Maximilian Schmidt, Milena Menezes Carvalho
*/

(unittest) run
/unittest using

% test parameters -------------------------------------------------
/N_spikes  1000 def  % Number of spikes send via the lossy synapse to each parrot neuron
/n_parrots 10 def    % Number of parrot neurons receiving spikes
/p 0.5 def           % Transmission probability of the lossy synapse
/margin 0.05 def     % allowed relative deviation of measured mean from the target mean
% test routine ----------------------------------------------------

/test_lossy_run
{
  /seed Set
  ResetKernel
  0 << /rng_seeds [seed] >> SetStatus

  % build
  /spike_generator Create /sg Set
  /parrot_neuron n_parrots Create 
  [2 11] Range /pn Set
  /spike_detector Create /sd Set

  % spike_generator 
  sg << /spike_times [1. N_spikes cvd] Range >> SetStatus

  % connects spike_generator to all parrot neurons via lossy_synapse with transmission
  % probability p
  [sg] pn << /rule /all_to_all >> << /model /lossy_synapse /p_transmit p >> Connect

  % connects parrot neurons to spike_detector
  pn [sd] Connect

  % simulates for 1001ms seconds to allow all spikes to be recorded accordingly
  N_spikes 1. add Simulate

  sd GetStatus /events get /times get length /N_spikes_transmitted Set

  % mean of spikes received at parrot neurons
  /mean N_spikes_transmitted n_parrots cvd div def
  
  % target mean value of spikes to be received with transmission probability p
  /target_mean N_spikes p mul def

  % checks if error between target mean and mean is within the defined margin
  target_mean mean sub abs target_mean margin mul lt 
  assert_or_die
}
def

% Test 1: tests 10 different rng seeds for test_lossy_run routine

[123 133] Range
{
  test_lossy_run
}
forall

% Test 2: tests if p_transmit values are within the range [0, 1]

/spike_generator Create /sg Set
/parrot_neuron 1 Create /pn Set

{ 
  [sg] [pn] << /rule /all_to_all >> << /model /lossy_synapse /p_transmit -0.1 >> Connect
} fail_or_die

{ 
  [sg] [pn] << /rule /all_to_all >> << /model /lossy_synapse /p_transmit 1.1 >> Connect
} fail_or_die
