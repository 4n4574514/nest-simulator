/*
 *  test_gif_psc_exp_multisynapse.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 /* BeginDocumentation
Name: testsuite::test_gif_psc_exp_multisynapse - sli script for test of gif_psc_exp_multisynapse with external DC current and spike generators

Synopsis: (test_gif_psc_exp_multisynapse) run


Description:

 This testscript checks the correctness of gif_psc_exp neuron model. It injects external DC current and also three spikes to two neurons and measures their spike times. The spike times should match the expected values.

Author:  March 2016, Setareh
SeeAlso: gif_psc_exp_multisynapse, testsuite::test_gif_psc_exp
*/

(unittest) run
/unittest using

/* 
  Due to stochasticity of the neuron model and different generated random numbers in case of 
  having or not having gsl, the expected spike times are different.
*/

statusdict/have_gsl :: not 
{ % neuron1 should fire spikes at 46.5, 85.7 and 124.8 ms in case of not having gsl
  465  /t1_neuron1  Set 
  857  /t2_neuron1  Set
  1248 /t3_neuron1  Set
} 
{ % neuron1 should fire spikes at 43.2, 84.5 and 122.7 ms in case of having gsl
  432  /t1_neuron1  Set 
  845  /t2_neuron1  Set
  1227 /t3_neuron1  Set
}
ifelse

statusdict/have_gsl :: not 
{ % neuron2 should fire spikes at 20.8 and 79.7 ms in case of not having gsl
  208  /t1_neuron2  Set 
  797  /t2_neuron2  Set
} 
{ % neuron2 should fire spikes at 21.0 and 83.2 ms in case of having gsl
  210  /t1_neuron2  Set 
  832  /t2_neuron2  Set
}
ifelse

0.1 /h Set

ResetKernel

0 << 
      /local_num_threads 1 
      /resolution h
      /grng_seed 0
      /rng_seeds [0]
    >> SetStatus

/gif_psc_exp_multisynapse Create /neuron1 Set % neuron1 has default parameters
neuron1 << /taus_syn [8.0] >> SetStatus


/gif_psc_exp_multisynapse Create /neuron2 Set
neuron2 << /C_m 40.0 /Delta_V 0.2 /taus_syn [8.0] /tau_sfa [120.0 10.0] /q_sfa [10.0 25.0] /tau_stc [10.0] /q_stc [20.0] >> SetStatus


/spike_generator Create /sg Set
sg << /spike_times [10.0 20.0 30.0]>> SetStatus

/dc_generator Create /dc_gen Set
dc_gen <<  /amplitude 170. >> SetStatus

/spike_detector Create /sd1 Set
/spike_detector Create /sd2 Set
sd1 << /withtime true /to_memory true /time_in_steps true >> SetStatus
sd2 << /withtime true /to_memory true /time_in_steps true >> SetStatus

dc_gen neuron1 Connect
dc_gen neuron2 Connect

neuron1 sd1 Connect
neuron2 sd2 Connect

sg neuron1 << /weight 1.0 /receptor_type 1 >> Connect
sg neuron2 << /weight 1.0 /receptor_type 1 >> Connect

150.0 Simulate


sd1 GetStatus /events get /times get /spikes1 Set
sd2 GetStatus /events get /times get /spikes2 Set

spikes1 size 3 eq assert_or_die

{} forall

t3_neuron1 eq rot
t2_neuron1 eq rot
t1_neuron1 eq and and

assert_or_die

spikes2 size 2 eq assert_or_die

{ } forall

t2_neuron2 eq rot
t1_neuron2 eq and

assert_or_die